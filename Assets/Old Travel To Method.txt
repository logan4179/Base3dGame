bug
	protected void TravelToGoal( float distThresh_endGoal_passed )
    {
        if ( amBugged )  return;
        travelToDbg = string.Empty;
        
        #region FOR QUICK/CHEAP DECISION-MAKING------------------------------------------
        bool movementShouldBeFast = false; //For Moving and Rotation
        if(MyActionState == EnemyActionState.Chasing || MyActionState == EnemyActionState.Engaging || MyActionState == EnemyActionState.ApproachingToStrike )
        {
            movementShouldBeFast = true;
        }
        #endregion

        try
        {
            //Vector3 v = Vector3.Normalize(MyPath.CurrentGoal - trans.position); //todo: indexoutofrangeexception here - this is older, have since created a cached vector to the goal calculated in the calculateSpatialValues() method, so don't need to do this calc anymore. Using following line for error catching...
            travelToDbg = MyPath.CurrentGoal.ToString(); //todo: indexoutofrangeexception here

        }
        catch (System.Exception)
        {
            PV_GameManager.Instance.PauseGame();
            throw;
        }

        #region CALCULATIONS-------------------------------------------------------------
        float mvSpd = movementShouldBeFast ? MyStats_Base_Enemy.Speed_Move_fast : MyStats_Base_Enemy.Speed_move_patrol;
        float rtSpd = movementShouldBeFast ? MyStats_Base_Enemy.Speed_Rotate_fast : MyStats_Base_Enemy.Speed_Rotate_patrol;
        dist_toNextPos = Vector3.Distance(trans.position, MyPath.CurrentGoal);
        float calculatedDistanceThresh = (MyPath.AmOnEndGoal && movementShouldBeFast) ? distThresh_endGoal_passed : MyStats_Base_Enemy.dist_RoughlyThere;
        float calculatedAngleThresh = MyPath.AmOnEndGoal ? MyStats_Base_Enemy.Percentage_consideredRoughlyFacing_threat : MyStats_Base_Enemy.Percentage_consideredRoughlyFacing_patrolPt;
        MovementState mvmtState_before = myMovementState;
        #endregion

        travelToDbg += $"distToNextPos: '{dist_toNextPos}', calculatedDistanceThresh: '{calculatedDistanceThresh}'\n" +
            $"dot_toNextPos: '{dot_facingToNextPos}', calculatedAngleThresh: '{calculatedAngleThresh}'\n" +
            //$"{nameof(index_CurrentNavigationPath)}: '{index_CurrentNavigationPath}'\n" +
            $"amonendgoal: '{MyPath.AmOnEndGoal}'\n" +
            $"NextPosition: '{MyPath.CurrentGoal}' \n v_toGoal: '{v_toGoal}'\n";

        #region HANDLE ROTATION---------------------------------------------
        float torqueMult = 1f;

        if ( dot_facingToNextPos > 0 )
        {
            torqueMult = 1 - (dot_facingToNextPos * 0.8f);
        }
        LookTowardNext( MyPath.CurrentGoal, MyPath.CurrentPathPoint.V_normal, rtSpd );
        #endregion

        #region HANDLE MOVEMENT--------------------------------------------
        if ( dist_toNextPos >= calculatedDistanceThresh && dot_facingToNextPos >= calculatedAngleThresh )
        {
            //rb.MovePosition( trans.position + (trans.forward * mvSpd * Time.fixedDeltaTime) );
            travelToDbg += $"State: Moving...\n";
            rb.MovePosition( trans.position + (v_toGoal * mvSpd * Time.fixedDeltaTime) );

            myMovementState = movementShouldBeFast ? MovementState.Running : MovementState.Walking;
            dist_toNextPos = Vector3.Distance(trans.position, MyPath.CurrentGoal);

        }
        else if ( dist_toNextPos < calculatedDistanceThresh)
        {
            travelToDbg += $"State: Idle...\n";

            myMovementState = MovementState.Idle;
        }
        else if ( dot_facingToNextPos < calculatedAngleThresh)
        {
            travelToDbg += $"State: turning in place...\n";

            myMovementState = MovementState.TurninngInPlace;
        }
        #endregion


        #region HANDLE ANIMATIONS-------------------------------------------
        if ( myMovementState != mvmtState_before )
        {
            anim.SetBool( myManager.animID_Walking, myMovementState == MovementState.Walking || myMovementState == MovementState.TurninngInPlace );
            anim.SetBool( myManager.animID_Running, myMovementState == MovementState.Running );

        }
        #endregion

        try
        {
            if ( dist_toNextPos < calculatedDistanceThresh && !MyPath.AmOnEndGoal )
            {
                // Turn on/off gravity before incrementing index
                LogHistoric( $"TravelPath() is finding new point. Index_currentPoint: '{MyPath.Index_currentPoint}', current length: '{MyPath.PathPoints.Count}'. " +
                    $"TurnOnGravity: '{MyPath.CurrentPathPoint.TurnOnGravity}', TurnOffGravity: '{MyPath.CurrentPathPoint.TurnOffGravity}'");
                if( MyPath.CurrentPathPoint.TurnOnGravity )
                {
                    //Debug.LogWarning($"turning on gravity for: '{name}'");
                    rb.useGravity = true;
                }
                else if( MyPath.CurrentPathPoint.TurnOffGravity )
                {
                    //Debug.LogWarning($"turning off gravity for: '{name}'");

                    rb.useGravity = false;
                }

                MyPath.Index_currentPoint++;

            }
        }
        catch (System.Exception)
        {
            PV_GameManager.Instance.PauseGame();
            throw;
        }
    }





flyer
	protected void TravelToGoal( float distThresh_endGoal_passed )
    {
        if ( amBugged )  return;
        travelToDbg = string.Empty;
        
        #region FOR QUICK/CHEAP DECISION-MAKING------------------------------------------
        bool movementShouldBeFast = false; //For Moving and Rotation
        if(MyActionState == EnemyActionState.Chasing || MyActionState == EnemyActionState.Engaging || MyActionState == EnemyActionState.ApproachingToStrike )
        {
            movementShouldBeFast = true;
        }
        #endregion

        try
        {
            //Vector3 v = Vector3.Normalize(MyPath.CurrentGoal - trans.position); //todo: indexoutofrangeexception here - this is older, have since created a cached vector to the goal calculated in the calculateSpatialValues() method, so don't need to do this calc anymore. Using following line for error catching...
            travelToDbg = MyPath.CurrentGoal.ToString(); //todo: indexoutofrangeexception here

        }
        catch (System.Exception)
        {
            PV_GameManager.Instance.PauseGame();
            throw;
        }

        #region CALCULATIONS-------------------------------------------------------------
        float mvSpd = movementShouldBeFast ? MyStats_Base_Enemy.Speed_Move_fast : MyStats_Base_Enemy.Speed_move_patrol;
        float rtSpd = movementShouldBeFast ? MyStats_Base_Enemy.Speed_Rotate_fast : MyStats_Base_Enemy.Speed_Rotate_patrol;
        dist_toNextPos = Vector3.Distance(trans.position, MyPath.CurrentGoal);
        float calculatedDistanceThresh = (MyPath.AmOnEndGoal && movementShouldBeFast) ? distThresh_endGoal_passed : MyStats_Base_Enemy.dist_RoughlyThere;
        float calculatedAngleThresh = MyPath.AmOnEndGoal ? MyStats_Base_Enemy.Percentage_consideredRoughlyFacing_threat : MyStats_Base_Enemy.Percentage_consideredRoughlyFacing_patrolPt;
        MovementState mvmtState_before = myMovementState;
        #endregion

        travelToDbg += $"distToNextPos: '{dist_toNextPos}', calculatedDistanceThresh: '{calculatedDistanceThresh}'\n" +
            $"dot_toNextPos: '{dot_facingToNextPos}', calculatedAngleThresh: '{calculatedAngleThresh}'\n" +
            //$"{nameof(index_CurrentNavigationPath)}: '{index_CurrentNavigationPath}'\n" +
            $"amonendgoal: '{MyPath.AmOnEndGoal}'\n" +
            $"NextPosition: '{MyPath.CurrentGoal}' \n v_toGoal: '{v_toGoal}'\n";

        #region HANDLE ROTATION---------------------------------------------
        float torqueMult = 1f;

        if ( dot_facingToNextPos > 0 )
        {
            torqueMult = 1 - (dot_facingToNextPos * 0.8f);
        }
        LookTowardNext( MyPath.CurrentGoal, MyPath.CurrentPathPoint.V_normal, rtSpd );
        #endregion

        #region HANDLE MOVEMENT--------------------------------------------
        if ( dist_toNextPos >= calculatedDistanceThresh && dot_facingToNextPos >= calculatedAngleThresh )
        {
            //rb.MovePosition( trans.position + (trans.forward * mvSpd * Time.fixedDeltaTime) );
            travelToDbg += $"State: Moving...\n";
            rb.MovePosition( trans.position + (v_toGoal * mvSpd * Time.fixedDeltaTime) );

            myMovementState = movementShouldBeFast ? MovementState.Running : MovementState.Walking;
            dist_toNextPos = Vector3.Distance(trans.position, MyPath.CurrentGoal);

        }
        else if ( dist_toNextPos < calculatedDistanceThresh)
        {
            travelToDbg += $"State: Idle...\n";

            myMovementState = MovementState.Idle;
        }
        else if ( dot_facingToNextPos < calculatedAngleThresh)
        {
            travelToDbg += $"State: turning in place...\n";

            myMovementState = MovementState.TurninngInPlace;
        }
        #endregion


        #region HANDLE ANIMATIONS-------------------------------------------
        if ( myMovementState != mvmtState_before )
        {
            anim.SetBool( myManager.animID_Walking, myMovementState == MovementState.Walking || myMovementState == MovementState.TurninngInPlace );
            anim.SetBool( myManager.animID_Running, myMovementState == MovementState.Running );

        }
        #endregion

        try
        {
            if ( dist_toNextPos < calculatedDistanceThresh && !MyPath.AmOnEndGoal )
            {
                // Turn on/off gravity before incrementing index
                LogHistoric( $"TravelPath() is finding new point. Index_currentPoint: '{MyPath.Index_currentPoint}', current length: '{MyPath.PathPoints.Count}'. " +
                    $"TurnOnGravity: '{MyPath.CurrentPathPoint.TurnOnGravity}', TurnOffGravity: '{MyPath.CurrentPathPoint.TurnOffGravity}'");

                MyPath.Index_currentPoint++;

            }
        }
        catch (System.Exception)
        {
            PV_GameManager.Instance.PauseGame();
            throw;
        }   
    }
